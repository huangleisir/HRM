<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
  http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/tx
  http://www.springframework.org/schema/tx/spring-tx.xsd
  http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context.xsd
  http://www.springframework.org/schema/aop
  http://www.springframework.org/schema/aop/spring-aop.xsd">


<!-- Spring有两方面功能：IOC，AOP，AOP又有两方面：@Aspect和TransactionManager -->
<!-- 下面这个会首先加载进内存，表面该项目是支持@Aspect注解的，如果注释掉，则被@Aspect注释过的类都不会调用 -->
<!-- HumanPermissionAspect类也会被调用 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    
    
    <!--  1.生声明事务处理器  AOP,增加的事务管理功能的bean 在这里将AOP与IOC建立起关联 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
    <!--2.声明事务通知   ******AOP,事务切入点(具体的) 这话讲的不对,这里跟切入点没关系********* 这里跟在方法上注解@Before一个意思 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" propagation="REQUIRED"
				isolation="DEFAULT"
				rollback-for="java.lang.Exception"
				></tx:method>
			<tx:method name="save*" read-only="false" propagation="REQUIRES_NEW"
				isolation="READ_COMMITTED"
				rollback-for="java.lang.Exception"
				no-rollback-for="java.lang.ArithmeticException"></tx:method>
<!-- 				如果不加rollback-for 事务管理有啥意义 -->
			<tx:method name="update*"></tx:method>
			<tx:method name="delete*"></tx:method>
		</tx:attributes>
	</tx:advice>
	<aop:config>
<!-- 	3.声明事务切入点，即哪些类下面的哪些方法受事务管理 -->
		<aop:pointcut expression="execution(public * com.hrm.service.impl..*(..))"
			id="service" />
<!-- 			为什么在多个地方都要出现方法呢，一个地方就够了啊 有些service不需要接受事务管理？粗粒度，细粒度是说这里吗 -->
<!-- 					切入点匹配结果：public类型的com.hrm.service.impl及其子包下面的所有方法 -->
<!-- 把切入点和事务通知关联起来 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="service" />
	</aop:config>
	



	<!-- IOC扫描,组件化开发@Repository,@Service,@Controller,@Resource/@Autowired -->
	<context:component-scan base-package="com.hrm" />

	<!-- c3p0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		<!-- 指定连接数据库的URL -->
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:ORCL" />
		<!-- 指定连接数据库的用户名 -->
		<property name="user" value="y01" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="123456" />
		<!-- 指定连接池中保留的最大连接数. Default:15 -->
		<property name="maxPoolSize" value="15" />
		<!-- 指定连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="5" />
		<!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
		<property name="initialPoolSize" value="5" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
		<property name="maxIdleTime" value="60" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
		<property name="acquireIncrement" value="3" />
		<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
		<property name="maxStatements" value="0" />
		<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
		<property name="idleConnectionTestPeriod" value="0" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。 Default:30 -->
		<property name="acquireRetryAttempts" value="30" />
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留,并在下次调用getConnection()的时候继续尝试获取连接。如果设为true,那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default:false -->
		<property name="breakAfterAcquireFailure" value="true" />
		<!-- 银性能消耗大请只在需要的时候是哟个它。如果设为true,那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等提升连接测试的性能。Default:false -->
		<property name="testConnectionOnCheckout" value="false" />
	</bean>


	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.Oracle10gDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!--ORM映射,扫描POJO 被注解的部分都是要在加载阶段进行编译扫描加载进内存的，如果有错误的话，会报告在控制台 -->
		<property name="packagesToScan">
			<list>
				<value>com.hrm.pojo</value>
			</list>
		</property>
	</bean>
	
	
	
	<!-- 通用DAO,hiberante templete 封装sessionFactory -->
	<bean id="HibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	


	
</beans>